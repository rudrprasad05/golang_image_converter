---
import saveAs from "file-saver"; // Required for downloading
const backendUrl = "http://44.204.76.51:8080";

// Declare variables with type annotations
let file: File | null = null;
let type: string = "png";
let loadingImage: boolean = false;
let imageUrl: string | null = null;

// Async function to handle form submission
async function onSubmit(event: SubmitEvent) {
  event.preventDefault();
  loadingImage = true;
  updateLoadingState();

  const formData = new FormData();

  if (file && type) {
    formData.append("file", file);
    formData.append("type", type);
  } else {
    alert("Please select a file and file type.");
    loadingImage = false;
    updateLoadingState();
    return;
  }

  try {
    const response = await fetch(`${backendUrl}/convert`, {
      method: "POST",
      body: formData,
    });

    if (response.ok) {
      imageUrl = await response.text();
      const convertedImage = document.getElementById("convertedImage") as HTMLImageElement;
      convertedImage.src = imageUrl;
      convertedImage.style.display = "inline-block";
      document.getElementById("downloadBtn")!.style.display = "inline-block";
    } else {
      console.error("Failed to convert image.");
    }
  } catch (error) {
    console.error("Error:", error);
  } finally {
    loadingImage = false;
    updateLoadingState();
  }
}

// Function to update the state of the Convert button
function updateLoadingState() {
  const convertButton = document.getElementById("convertButton") as HTMLButtonElement;
  convertButton.disabled = loadingImage;
  convertButton.textContent = loadingImage ? "Converting..." : "Convert";
}

// Function to handle file input changes
function handleFileChange(event: Event) {
  const target = event.target as HTMLInputElement;
  if (target.files && target.files[0]) {
    file = target.files[0];
    document.getElementById("fileInfo")!.textContent = file.name;
  } else {
    file = null;
    document.getElementById("fileInfo")!.textContent = "No file selected";
  }
}

// Function to handle the download of the converted image
async function downloadImage() {
  if (!imageUrl) return;

  try {
    const response = await fetch(`${backendUrl}/download?file=${imageUrl}`);
    const blob = await response.blob();
    saveAs(blob, `converted_image.${type}`);
  } catch (error) {
    console.error("Error downloading the image:", error);
  }
}
---

<div>
  <form onSubmit={onSubmit} class="space-y-5 pt-8">
    <input
      type="file"
      accept="image/*"
      onchange={(e: Event) => handleFileChange(e)}
      class="w-full border rounded p-2"
    />

    <section class="file-info mt-2">
      <span id="fileInfo">No file selected</span>
    </section>

    <div class="select-type mt-4">
      <label for="fileType">Choose type:</label>
      <select id="fileType" onchange={(e: { target: HTMLSelectElement; }) => (type = (e.target as HTMLSelectElement).value)} class="bg-indigo-700 text-white rounded px-4 py-2">
        <option value="png">PNG</option>
        <option value="jpeg">JPEG</option>
        <option value="jpg">JPG</option>
        <option value="webp">WEBP</option>
      </select>
    </div>

    <button
      type="submit"
      id="convertButton"
      class="button bg-indigo-500 text-white px-4 py-2 rounded mt-4"
    >
      Convert
    </button>
  </form>

  {imageUrl && (
    <section class="w-4/5 mx-auto mt-6 bg-indigo-700 rounded-sm flex justify-between items-center">
      <img id="convertedImage" src="" alt="Converted image" style="width: 100px; height: 100px; display: none;" />
      <button id="downloadBtn" style="display: none;" class="bg-blue-500 text-white px-4 py-2 rounded" onClick={downloadImage}>Download</button>
    </section>
  )}
</div>
